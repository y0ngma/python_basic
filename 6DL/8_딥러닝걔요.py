# -*- coding: utf-8 -*-
"""8.딥러닝걔요.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OH5uBgQZm8We-yCg3P7jjEy_G0I859vW

# 딥러닝개요

## 개요

- AI > ML > Deep Learning
- 인공지능 연구 분야중 하나이다
- 인간의 뇌속의 뉴런을 모방한 신경망을  여러층으로 겹쳐서(다양하게 구성해서) 대규모로  
  학습 및 예측을 수행하는 머신러닝의  한가지 방법이다
- 3단계로 구성
  1. 모델작성 -> 신경망설계 및 구현
    1. 요구사항(프로젝트 주제 등)이 어떤 신경망 형태로 구현해야 적합한지 사전에 인지,  
    새롭게 적용하는것도 구성 검토
    1. 뉴럴 네트워크 구조를 설계(작성)
    1. 수치계산(산수수준) -> 입력 레이어(층) 수, 출력층의 수, 히든 레이어의 수, 레이어의 종류  
    정립
    1. 가중치 파라미터, 바이어스(편향)값들을, 0 또는 특정값으로 또는 난수로 초기화한다.
      - 퍼셉트론을 통해서 등장함
  1. 학습
    1. 입력데이터에 맞춰 적절한 예측값이 나오도록, 가중치 파라미터(W), 바이어스(b)를 최적화한다.
      - 파라미터 관점으로 볼 수 있다. 
    1. 이를 위해서 대량의 학습데이터와 정답세트를 이용한다(지도학습) 
      - <=> 생성모델(DeepFake, GAN)
    1. 예측값으로부터 최초 학습데이터까지 꺼꾸로 이동(역전파)
      - 손실발생 -> W, b를 최적화한다.
    1. 이것을 반복한다
    1. 최종적인 학습데이터에서 적절한 예측값이 출력되게끔 모델생성
  1. 추론(예측)
    - 테스트 데이터를 모델에 입력하여 예측을 수행, 이에 따른 판단

## 인공신경망

- 인공지능을 구현하는 알고리즘이다

## History

## 엔진

이름|출처|
- tensorflow  
  (단독 또는 Keras와 같이 짤건지)
  - 구글
  - 파이썬, C++, CUDA
  - `저수준 API`
  - 거대 커뮤니티(QnA, 내역많음, 사례도 많다)

- pyTouch
  - facebook
  - 파이썬, C++, CUDA, 루아

- Keras
  - 텐서플로우에 병합도니 모델 또는 최초모델처럼 인터페이스를 지원하는 모델(2017이후)
  - 크로스 플랫폼(어떤 엔진을 사용하더라도, 동일한 코드로 작동되게 구현하자)
  - 쉽다, 비전산 전공자도 쉽게 작성할 수 있게 내부는 숨기고 `고수준 API`만으로 구현

- Theano
  - 대학 + MILA(기관)

- CNTK
  - MS
  - C++

- MXNET
  - 아마존
  - C++, 파이썬, R, JS, scalar, Go, 펄, ...

## 엔진의 구동방식(양대 진영)

- 2019 집계(미국에서 조사가능한 기업대상)
  - 1위 텐서플로
  - 2위 파이토치
  - 3위 케라스

- 방식
  - Define-and-Run
    - 2016년 까지 주류의 스타일, 방식
    - 텐서플로우
    1. 계산 그래프, 데이터플로우 그래프를 설계
    1. 세션에 그래프에 들어갈 데이터(수치)
    1. 세션 실행(연산, 학습, 훈련 등)
    1. 플로우(파이썬), 연산(C++) 분리
    1. 고속화처리가 쉽게 구현된다.
    1. 상대적인 학습비용이 발생, 높다  
    1. 오류가 나면 당췌 모르겟다  
    (지점찾기가 쉽지않다)

  - Define-by-Run
    - 채이너(chainer)에서 pyTorch가  분사해나옴
    - 채이너에서 사용하는 방식(일본서 인기)
    - 파이토치
    1. 계산 그래프를 그리는 동시에
    1. 주입할 데이터가(수치)를 주입, 보관
    1. 연산을 바로 수행(파이썬 방식과 동일)
    1. 오류가 발생하면 즉시 파악하기가 쉽다
    1. 모토:유연성, 직관성, 고성능 3요소
    1. 텐서플로우도 Eager Execution을 이용하면 이방식으로 처리가능

# 신경망의 종류

## CNN

- 컨볼류젼 뉴럴 네트워크
- 주로 영상처리

### 이미지분류
- 이미지 인식 대회, ILSVRC
- AlexNet(2012) > GoogleLeNet( inception v2, 2014) > ResNet(2015, 인식오류 5%) >  
GoogleLeNet-v4(2016) > seNet(2017, 2.3%) : 대회종료
- 이미지를 시뮬레이션 할수 있는 사이트
- 링크
  ```html
    https://cloud.google.com/vision
    https://azure.microsoft.com/ko-kr/services/cognitive-services/computer-vision/
    https://aws.amazon.com/ko/rekognition/
    https://www.ibm.com/watson/kr-ko/developercloud/visual-recognition.html
  ```
- 1장의 이미지가 존재, 이 이미지의 물체가 있고 이것이 무엇인가를 예측/추정하는것

### 영상내 물체인식
- 1장의 이미지에 1개 이상의 물체가 존재하고 이 물체들이 어디에 있는지 추적/예측,  
이 물체가 무엇인지까지도 발전
- tensowflow Object_detection
`https://github.com/tensorflow/models/tree/master/research/object_detection`

### 영상내 분할
- 물체인식과 유사
- 단, 물체의 영역을 표현하는 방식이 물체인식은 사각형임에 비해,  
분할은 픽셀단위로 추정(물체의 모양에 따른 경계선)
`http://cocodataset.org/#detection-2017`
- 겹침에 약하다. 물체의 갯수를 추정할 때 물체가 겹친다면 부적절

### 초해상
- 저해상도 이미지에서 고해상도 이미지를 생성 `http://waifu2x.udp.jp`

## GAN

- 적대적 생성 네트워크
- DCGAN, DEGAN, GAN
- 생성 모델 => 창조
- 이미지 변환, 화풍변환, 선화에서 채색하기,  
흑백에서 칼라로 채색, 여름풍경에서 겨울풍경으로 만들기

## CAE

- 이미지 생성
- 수치, 텍스트 등으로 부터 이미지
  - 생성모델 CNN, DCGAN 등 연계`https://arxiv.org/pdf/1511.06434.pdf`

- 노이즈 제거

## RNN

- 순환(재귀적) 신경망
- 시간정보가 들어간다!
- 자연어처리 : 문서분류, 대화문 생성, 기계번역, 문서요약, 챗봇
  - 자연어 처리 프로세스
    - 사전 생성, 형태소 분리(분절), 데이터의 백터화(원핫인코딩)
    - 수치화 -> RNN
- 동영상 분류
- 음성인식
- 음성합성, 음악생성(조합)
- 시계열 데이터(설비, 품질, 제조, 주식, 금융 등)
  - LSTM

### 음성인식
`http://tcpschool.com/deeplearning/deep_sound`
<table border="1" cellpadding="0" cellspacing="0">
	<tbody>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p align="center"><strong>방식</strong></p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p align="center"><strong>PER(%)</strong></p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Randomly Initialized RNN</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;26.1</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 23px;">
			<p>&nbsp;Bayesian Triphone GMM-HMM</p>
			</td>
			<td style="width: 58px; height: 23px;">
			<p>&nbsp;25.6</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Hidden Trajectory (Generative) Model</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;24.8</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Monophone Randomly Initialized DNN</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;23.4</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Monophone DBN-DNN</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;22.4</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Triphone GMM-HMM with BMMI Training</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;21.7</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 23px;">
			<p>&nbsp;Monophone DBN-DNN on fbank</p>
			</td>
			<td style="width: 58px; height: 23px;">
			<p>&nbsp;20.7</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Convolutional DNN</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;20.0</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Convolutional DNN w. Heterogeneous Pooli</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;18.7</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Ensemble DNN/CNN/RNN</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;18.2</p>
			</td>
		</tr>
		<tr>
			<td style="width: 325px; height: 22px;">
			<p>&nbsp;Bidirectional LSTM</p>
			</td>
			<td style="width: 58px; height: 22px;">
			<p>&nbsp;17.9</p>
			</td>
		</tr>
	</tbody>
</table>

### 음성합성, 음악생성
- proect magenta (음성 합성)
  - `https://github.com/tensorflow/magenta`  
- WaveNet (음악 생성(조합))
  - `https://deepmind.com/blog/article/wavenet-generative-model-raw-audio`

### RNN 구성에 따른 결과물
입력출력수에 따른 분류|내용
---|---|
one-to-many|이미지 캡셔닝, 이미지를 보고 텍스트를 생성
many-to-one|감성분류 : 입력문서(리뷰)가 긍정/부정 판별<br><br>스팸메일분류
many-to-many|챗봇 : 입력문장에 대해서 대답 문자를 만든다<br><br>기계번역 : 입력문장으로부터 번역된 문자를 만든다<br><br>입력대비 동시에 출력되는 방식

## DQN

- 강화학습
- 구글 딥마인드
- 알파고 
  - 유럽챔피언 5전 전승
  - 이세돌 4승 1패
  - AlphaGo Lee, AlphaGo Lee/Master
- 알파고제로
  - 기보학습 없음
  - 학습은 단 3일만 수행
  - 알파고한테 100전 전승
- 알파제로
  - 알파고 제로 나오고 48일후 등장
  - 바둑, 장기, 체스 등 각 게임에 적용될 수 잇는 범용AI를 제작해서, 각 게임의 AI챔피언을 꺾었다
  - 숙련 데이터가 없어도, 임의의 task로 학습이 수행 가능하겠끔 범용 AI를 생성
- 알파폴드
  - 의료분야, 유전다배열 정보, 단백질 입체구조를 예측
- 알파스타
  - 스타크래프트2를 공략하는 AI, 바둑의 행동수는 19*19 =>361개의 경우수
  - 스타2는 리얼타임 + 1026개의 경우수
  - 기업의 비즈니스 모델에 적용하기 적절하다

## 기타(주제로 분류)

# 텐서플로우 개요

## 기본정보

- 구글이 오픈소스로 공개한 머신러닝 엔진
- 딥러닝, 머신러닝
- 기본 자료구조 => Tensor
"""

from IPython.display import Image
f_path = '/content/drive/My Drive/data/DL_Data/텐서용어.png'
Image(f_path, width='700')

f_path = '/content/drive/My Drive/data/DL_Data/8.tensor.jpeg'
Image(f_path, width='700')

"""- Tensor는 다차원 행렬(계산)이다
  - 딥러닝의 연산은 행렬의 계산
  - 행렬연산을 아주 잘하는 장비는 GPU
  - GPU를 통한 학습이 CPU보다 월등한 이유
- 상업화가 가능한가? OK(apache 2.0 라이센스 지원)

## 특징

- DAG(Directed acyclic graph)
  - 방향성이 비순환되는 그래프(플로우) 기반 (관계, 연결)
  1. 그래프를 짜고 데이터를 주입하여
  1. 연산은 파이썬 바깥쪽 코어에서(C++)에서 수행
  1. 결과를 다시 파이썬으로 보내준다.
- 다양한 환경에서 구동
  - CPU, GPU 동일코드로 작동
  - 고속 연산처리 언어(C++. 타 언어로 교체 가능:
    - Android(java/kotlin)
    - iOS(objective-C, swift)
  - 모바일용 텐서플로우 : Tensorflow-lite
    - `https://firebase.google.com/docs/ml-kit/android/detect-faces?hl=ko`
    - 모바일개발자가 딥러닝 하고 들어오면 됨
    - tf-lite로 모델을 생성하여 스마트폰에 탑재. 모바일로 딥러닝을 지원
    - JS용 deeplearn.js를 이용하여 브라우저상에서 JS로 구현가능

- 분산 처리
  - 계산량이 많아서 나눠서 처리가 가능
- 텐서보드를 통한 시각화
  - 텐서플로우는 블랙박스 모델이다(내부가 숨겨져 있다)
  - 이때문에 오류 발생시 해결하기 어렵다
  - 흐름도 이해하기 어렵다
  - 텐서보드를 통해 그래프의 시각화, 손실함수, 중간층, 특질량 등등을 이해 및 분석
- 저수준 API, 고수준 API 지원
  - 순수 텐서플로우는 저수준
  - 케라스가 합류하면서 고수준
- 거대 커뮤니티 지원
  - 많은 양의 케이스와 QnA들이 존재, 지원
- 에코시스템
  - 개선, 오류 해결 등
"""

# Commented out IPython magic to ensure Python compatibility.
# 텐서플로우 엔진 사용법
import tensorflow as tf
# 향후 코랩이 2.x로 업그레이드되도 나는 1.x로 버전고정하겠다
# %tensorflow_version 1.x

# 버전확인
tf.__version__

"""## 구동원리

# 퍼셉트론

## 기본원리

- 기계학습의 기초, 핵심걔념
- 1957
- 단순퍼셉트론(simple perceptron)
  - 입력층, 출력층 존재
  - 입력은 x0, x1, .. xn -> y로 출력을 수렴했다
  - 어떤 입력이 어떤 출력으로 확정되엇는가?
- 2020년 5월말 아이패드4세대 트랙패드 지원  
키보드가 한화 40-45만원으로 출시될 예정이다
당신은 구매할것인가
  - y(출력) : 구매한다(1), 비구매한다(0)
  - x(입력) : 구매를 해도 좋을지 관련된 요인들
    - 비용이 충분한가 ? x1
    - 저장공간이 충분한가? x2
    - AR 카메라가 필요한가? x3
    - 카메라 기능이 갤20보다 뛰어난가? x4
    - 무게는 적절한가? x5
    - 지금쓰는 폰이 문제있나 ?  x6
    - ...
  - 판단 : 입력요인중 과반이 OK이면 살것인가  
  (과반이더라도 돈이없으면 구매불가) -> 요인별 가중치가 다르다(W)
    - 각 입력요인에 가중치를 곱해서 이를 합산한 값이  
  구매/비구매를 결정하는 임계값을 넘으면 구매, 아니면 비구매
    - 구매요인 = x1*W1 + x2*W2 + ... + xn*Wn
    - C : 임계값
    - 식
      if 구매요인 > C:
        구매
      else:
        비구매
    - 이런 방식(층)을 여러개로 조합하면 더욱 좋은 판단을 할 것이다

## 가중치

- 입력신호가 결과, 출력에 주는 영향도를 조절하는 매개변수이다

## 편향

- bias
- 입력신호가 얼마나 쉽게 활성화되는가를 조정(adjust)하는 매개변수
- 편향값이 높으면 모델이 간단해 진다. 과소적합의 위험이 생길 수 있다
- 편향값이 낮으면 한계점이 낮아져서, 데이터의 허용범위가 넓어진다 
 - => 모델이 잘 들어맞게 되서, 과대 적합에 빠질수 있다
"""

